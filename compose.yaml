# # Comments are provided throughout this file to help you get started.
# # If you need more help, visit the Docker compose reference guide at
# # https://docs.docker.com/compose/compose-file/

# # Here the instructions define your application as a service called "server".
# # This service is built from the Dockerfile in the current directory.
# # You can add other services your application may depend on here, such as a
# # database or a cache. For examples, see the Awesome Compose repository:
# # https://github.com/docker/awesome-compose
# services:
#   # server:
#   #   build:
#   #     context: .
#   #   environment:
#   #     NODE_ENV: production
#   #   ports:
#   #     - 3000:3000
#   # The commented out section below is an example of how to define a PostgreSQL
#   # database that your application can use. `depends_on` tells Docker Compose to
#   # start the database before your application. The `db-data` volume persists the
#   # database data between container restarts. The `db-password` secret is used
#   # to set the database password. You must create `db/password.txt` and add
#   # a password of your choosing to it before running `docker-compose up`.
#   #     depends_on:
#   #       db:
#   #         condition: service_healthy

#   pgadmin:
#     image: dpage/pgadmin4
#     restart: always
#     container_name: online-store-pgadmin
#     networks:
#       - online-store
#     environment:
#       - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
#       - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
#     env_file: .env
#     ports:
#       - '5050:80'

#   db:
#     image: postgres
#     restart: always
#     container_name: online-store-postgres
#     networks:
#       - online-store
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_USER=${POSTGRES_USER}
#       - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#       - POSTGRES_DB=${POSTGRES_DB}
#     env_file: .env
#     ports:
#       - 5432:5432

# volumes:
#   db-data:

# networks:
#   online-store:

version: '3.9'

services:
  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - online_store

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - '8080:80'
    depends_on:
      - postgres
    networks:
      - online_store

volumes:
  postgres_data:

networks:
  online_store:
    driver: bridge
